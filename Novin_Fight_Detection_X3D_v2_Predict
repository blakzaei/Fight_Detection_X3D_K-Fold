{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9672991,"sourceType":"datasetVersion","datasetId":5911374},{"sourceId":201640937,"sourceType":"kernelVersion"},{"sourceId":201641001,"sourceType":"kernelVersion"},{"sourceId":202002346,"sourceType":"kernelVersion"},{"sourceId":202002641,"sourceType":"kernelVersion"},{"sourceId":202003313,"sourceType":"kernelVersion"},{"sourceId":202232624,"sourceType":"kernelVersion"}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"#-- use trained model to predict on videos --\n#-- use Fight_Detection_X3D_32_v2_2_Fold? --","metadata":{"execution":{"iopub.status.busy":"2024-10-23T07:14:35.708077Z","iopub.execute_input":"2024-10-23T07:14:35.708824Z","iopub.status.idle":"2024-10-23T07:14:35.737949Z","shell.execute_reply.started":"2024-10-23T07:14:35.708787Z","shell.execute_reply":"2024-10-23T07:14:35.736706Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#-- Install Libraries -------------------------------------------------------------------------------------------\n!pip install pytorchvideo\n\nfrom IPython import display\ndisplay.clear_output()\n#-----------------------------------------------------------------------------------------------------------------","metadata":{"execution":{"iopub.status.busy":"2024-10-23T08:25:37.154917Z","iopub.execute_input":"2024-10-23T08:25:37.155337Z","iopub.status.idle":"2024-10-23T08:25:49.189940Z","shell.execute_reply.started":"2024-10-23T08:25:37.155305Z","shell.execute_reply":"2024-10-23T08:25:49.188708Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#-- Imports ------------------------------------------------------------------------------------------------------\nimport torch\nimport torch.nn as nn\n\nfrom collections import Counter\n\nimport cv2\n\nimport pandas as pd\nimport numpy as np\nimport random\n\nimport os\nimport shutil\nimport copy\n#-----------------------------------------------------------------------------------------------------------------","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-10-23T08:26:00.495337Z","iopub.execute_input":"2024-10-23T08:26:00.495759Z","iopub.status.idle":"2024-10-23T08:26:00.503066Z","shell.execute_reply.started":"2024-10-23T08:26:00.495723Z","shell.execute_reply":"2024-10-23T08:26:00.501869Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#-- Initialize ---------------------------------------------------------------------------------------------------\nbest_weights_dir_1 = '/kaggle/input/fight-detection-x3d-32-v2-2-fold1/1_best.pth'\nbest_weights_dir_2 = '/kaggle/input/fight-detection-x3d-32-v2-2-fold2/2_best.pth'\nbest_weights_dir_3 = '/kaggle/input/fight-detection-x3d-32-v2-2-fold3/3_best.pth'\nbest_weights_dir_4 = '/kaggle/input/fight-detection-x3d-32-v2-2-fold4/4_best.pth'\nbest_weights_dir_5 = '/kaggle/input/fight-detection-x3d-32-v2-2-fold5/5_best.pth'\n\nbest_weights_dir = best_weights_dir_1\n\nfight_samples_dir_1 = '/kaggle/input/sample-videos-for-fight-detection-2/fight/'\nnormal_samples_dir_1 = '/kaggle/input/sample-videos-for-fight-detection-2/normal/'\n\nfight_samples_dir_2 = '/kaggle/input/fight-detection-x3d-video-augmentation/results/fight/'\nnormal_samples_dir_2 = '/kaggle/input/fight-detection-x3d-video-augmentation/results/normal/'\n\nDEVICE = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nprint(f'device: {DEVICE}')\n\nNUM_CLASSES = 2\nCLASS_NAMES = ['fight', 'normal']\n\nNUM_FRAMES = 32\nFRAME_W = 256\nFRAME_H = 256\n#-----------------------------------------------------------------------------------------------------------------","metadata":{"execution":{"iopub.status.busy":"2024-10-23T08:26:02.746211Z","iopub.execute_input":"2024-10-23T08:26:02.746600Z","iopub.status.idle":"2024-10-23T08:26:02.755172Z","shell.execute_reply.started":"2024-10-23T08:26:02.746570Z","shell.execute_reply":"2024-10-23T08:26:02.753969Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#-- Function to Modify X3D for finetuning ------------------------------------------------------------------------\ndef custome_X3D(num_classes):\n    #-- load X3D model --\n    model_name = 'x3d_m'\n    model = torch.hub.load('facebookresearch/pytorchvideo', model_name, pretrained=True)   \n    \n     #-- Freeze all layers --\n    for param in model.parameters():\n        param.requires_grad = False\n    \n    #-- set last layer for custome classification --\n    input_size = model.blocks[-1].proj.in_features\n    model.blocks[-1].proj = nn.Linear(in_features=input_size, out_features=num_classes)\n    \n    #-- Unfreeze 5 Last Block --\n    for param in model.blocks[5].parameters():\n        param.requires_grad = True\n    for param in model.blocks[4].parameters():\n        param.requires_grad = True    \n\n    return model\n#-----------------------------------------------------------------------------------------------------------------","metadata":{"execution":{"iopub.status.busy":"2024-10-23T08:26:06.256840Z","iopub.execute_input":"2024-10-23T08:26:06.257281Z","iopub.status.idle":"2024-10-23T08:26:06.265867Z","shell.execute_reply.started":"2024-10-23T08:26:06.257245Z","shell.execute_reply":"2024-10-23T08:26:06.264308Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#-- Create Model and Load weights --------------------------------------------------------------------------------\n#-- Create the model architecture --\nmodel_1 = custome_X3D(NUM_CLASSES)\nmodel_2 = custome_X3D(NUM_CLASSES)\nmodel_3 = custome_X3D(NUM_CLASSES)\nmodel_4 = custome_X3D(NUM_CLASSES)\nmodel_5 = custome_X3D(NUM_CLASSES)\n\n#-- Load the saved state dictionary --\nmodel_1.load_state_dict(torch.load(best_weights_dir_1, map_location=torch.device(DEVICE)))\nmodel_2.load_state_dict(torch.load(best_weights_dir_2, map_location=torch.device(DEVICE)))\nmodel_3.load_state_dict(torch.load(best_weights_dir_3, map_location=torch.device(DEVICE)))\nmodel_4.load_state_dict(torch.load(best_weights_dir_4, map_location=torch.device(DEVICE)))\nmodel_5.load_state_dict(torch.load(best_weights_dir_5, map_location=torch.device(DEVICE)))\n\nmodels = [model_1, model_2, model_3, model_4, model_5]\n\nbest_model = custome_X3D(NUM_CLASSES)\nbest_model.load_state_dict(torch.load(best_weights_dir, map_location=torch.device(DEVICE)))\n#-----------------------------------------------------------------------------------------------------------------","metadata":{"execution":{"iopub.status.busy":"2024-10-23T08:26:08.355998Z","iopub.execute_input":"2024-10-23T08:26:08.356432Z","iopub.status.idle":"2024-10-23T08:26:10.609712Z","shell.execute_reply.started":"2024-10-23T08:26:08.356399Z","shell.execute_reply":"2024-10-23T08:26:10.608540Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#-- Function to Preprocess videos -------------------------------------------------------------------------------\ndef preprocess_video(video_path, num_frames=NUM_FRAMES, resize=(FRAME_W, FRAME_H)):    \n    \n    cap = cv2.VideoCapture(video_path)\n    frames = []\n    while cap.isOpened():\n        ret, frame = cap.read()\n        if not ret:\n            break\n        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n        frame = cv2.resize(frame, resize)\n        frames.append(frame)\n    cap.release()\n\n    frames = np.array(frames)\n\n    #-- Sample frames --\n    if len(frames) > num_frames:\n        indices = np.linspace(0, len(frames) - 1, num_frames).astype(int)\n        sampled_frames = frames[indices]\n    elif len(frames) < num_frames:\n        padding = np.zeros((num_frames - len(frames), *resize, 3))\n        sampled_frames = np.concatenate((frames, padding), axis=0)\n    else:\n        sampled_frames = frames\n    \n    sampled_frames \n    \n    \n    #print('sampled_frames:', sampled_frames.shape)\n    \n    #-- Convert to tensor and add batch dimension --\n    sampled_frames = np.transpose(sampled_frames, (3, 0, 1, 2))  #[frames, channels, height, width]\n    sampled_frames = torch.from_numpy(sampled_frames).float().unsqueeze(0)  # add batch dimension\n    \n    sampled_frames  = sampled_frames / 255.0\n    \n    return sampled_frames\n#-------------------------------------------------------------------------------------------------------------","metadata":{"execution":{"iopub.status.busy":"2024-10-23T08:26:12.775308Z","iopub.execute_input":"2024-10-23T08:26:12.775675Z","iopub.status.idle":"2024-10-23T08:26:12.785645Z","shell.execute_reply.started":"2024-10-23T08:26:12.775647Z","shell.execute_reply":"2024-10-23T08:26:12.784315Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#-- function to Predict video label ------------------------------------------------------------------------------\ndef predict_video_ensemble_avg(video_path, models, num_frames=NUM_FRAMES, resize=(FRAME_W, FRAME_H)):\n    \n    preprocessed_video = preprocess_video(video_path,\n                                          NUM_FRAMES,\n                                          (FRAME_W, FRAME_H))\n    \n    ensemble_outputs = torch.zeros(1, NUM_CLASSES)\n    with torch.no_grad():\n        for model in models:\n            model.eval()\n            outputs = model(preprocessed_video)              \n            ensemble_outputs += outputs \n    \n    ensemble_outputs /= len(models)      \n    _, predicted = torch.max(ensemble_outputs, 1)\n    \n    return predicted.item()    \n#-------------------------------------------------------------------------------------------------------------","metadata":{"execution":{"iopub.status.busy":"2024-10-23T08:26:16.753340Z","iopub.execute_input":"2024-10-23T08:26:16.754077Z","iopub.status.idle":"2024-10-23T08:26:16.760478Z","shell.execute_reply.started":"2024-10-23T08:26:16.754040Z","shell.execute_reply":"2024-10-23T08:26:16.759436Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def predict_video_ensemble_voting(video_path, models, num_frames=NUM_FRAMES, resize=(FRAME_W, FRAME_H)):\n    \n    preprocessed_video = preprocess_video(video_path,\n                                          num_frames,\n                                          resize)\n    \n    predictions = []\n    \n    with torch.no_grad():\n        for model in models:\n            model.eval()\n            outputs = model(preprocessed_video)  \n            _, predicted = torch.max(outputs, 1)  \n            predictions.append(predicted.item())  \n    \n    most_common_prediction = Counter(predictions).most_common(1)[0][0]\n    \n    return most_common_prediction","metadata":{"execution":{"iopub.status.busy":"2024-10-23T08:26:19.314518Z","iopub.execute_input":"2024-10-23T08:26:19.314900Z","iopub.status.idle":"2024-10-23T08:26:19.322183Z","shell.execute_reply.started":"2024-10-23T08:26:19.314869Z","shell.execute_reply":"2024-10-23T08:26:19.320782Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#-- function to Predict video label ------------------------------------------------------------------------------\ndef predict_video_best_model(video_path, best_model, num_frames=NUM_FRAMES, resize=(FRAME_W, FRAME_H)):\n    \n    preprocessed_video = preprocess_video(video_path,\n                                          NUM_FRAMES,\n                                          (FRAME_W, FRAME_H))\n    \n    #print('preprocessed_video:' , preprocessed_video.shape)\n    #-- Predict label --\n    best_model.eval()\n    with torch.no_grad():\n        outputs = best_model(preprocessed_video)\n        _, predicted = torch.max(outputs, 1)  \n    \n    return predicted.item()\n#-------------------------------------------------------------------------------------------------------------","metadata":{"execution":{"iopub.status.busy":"2024-10-23T08:26:22.354439Z","iopub.execute_input":"2024-10-23T08:26:22.354836Z","iopub.status.idle":"2024-10-23T08:26:22.361632Z","shell.execute_reply.started":"2024-10-23T08:26:22.354804Z","shell.execute_reply":"2024-10-23T08:26:22.360343Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#-- ّFunction to get video properties ---------------------------------------------------------------------------\ndef get_video_properties(video_path):\n    cap = cv2.VideoCapture(video_path)\n    \n    fps = cap.get(cv2.CAP_PROP_FPS)\n    total_frames = cap.get(cv2.CAP_PROP_FRAME_COUNT)\n    duration_seconds = int(total_frames / fps)\n\n    cap.release()\n    \n    return fps ,total_frames, duration_seconds\n#-------------------------------------------------------------------------------------------------------------","metadata":{"execution":{"iopub.status.busy":"2024-10-23T08:26:24.595578Z","iopub.execute_input":"2024-10-23T08:26:24.595998Z","iopub.status.idle":"2024-10-23T08:26:24.602367Z","shell.execute_reply.started":"2024-10-23T08:26:24.595964Z","shell.execute_reply":"2024-10-23T08:26:24.601049Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#-- Create CSV File to save results ---------------------------------------------------------------------------\ncolumns = ['video_name', 'fps', 'total_Frams', 'duration', 'true_label',\n           'predicted_label_best_model', 'predicted_label_ens_avg', 'predicted_label_ens_voting']\ndf_result = pd.DataFrame(columns=columns)\n#--------------------------------------------------------------------------------------------------------------","metadata":{"execution":{"iopub.status.busy":"2024-10-23T07:36:01.524690Z","iopub.execute_input":"2024-10-23T07:36:01.525070Z","iopub.status.idle":"2024-10-23T07:36:01.532900Z","shell.execute_reply.started":"2024-10-23T07:36:01.525042Z","shell.execute_reply":"2024-10-23T07:36:01.531759Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#-- Run on main videos -------------------------------------------------------------------------------------------\n#-- Test Fights --\nprint('Processing Fight Samples: ==============================================')\ntrue_label = 'fight'\n\nnum_true_predicted_best_m = 0\nnum_false_predicted_best_m = 0\nnum_true_predicted_ens_avg = 0\nnum_false_predicted_ens_avg = 0\nnum_true_predicted_ens_vot = 0\nnum_false_predicted_ens_vot = 0\n\n\nfor video_file in sorted(os.listdir(fight_samples_dir_1)):    \n    #-- log --\n    print(f'Processing {video_file} -------------------------------------') \n    \n    video_path = os.path.join(fight_samples_dir_1, video_file)      \n    \n    fps ,total_frames, duration = get_video_properties(video_path)\n    print(f'FPS = {fps}\\nTotal Frames = {total_frames}\\nDuration = {duration}')\n    \n    label_ens_best_m = predict_video_best_model(video_path, best_model)\n    label_ens_avg = predict_video_ensemble_avg(video_path, models)\n    label_ens_voting = predict_video_ensemble_voting(video_path, models)\n    \n    print(f'True label: {true_label}\\n'\n          f'Predicted label best model: {CLASS_NAMES[label_ens_best_m]}\\n'\n          f'Predicted label ensemble avg: {CLASS_NAMES[label_ens_avg]}\\n'\n          f'Predicted label ensemble voting: {CLASS_NAMES[label_ens_voting]}\\n')\n    \n    if CLASS_NAMES[label_ens_best_m]==true_label:\n        num_true_predicted_best_m +=1\n    else:\n        num_false_predicted_best_m +=1\n    \n    if CLASS_NAMES[label_ens_avg]==true_label:\n        num_true_predicted_ens_avg +=1\n    else:\n        num_false_predicted_ens_avg +=1\n    \n    if CLASS_NAMES[label_ens_voting]==true_label:\n        num_true_predicted_ens_vot +=1\n    else:\n        num_false_predicted_ens_vot +=1\n    \n    \n    new_row = {\n        'video_name': video_file,\n        'fps': fps,\n        'total_Frams': total_frames,\n        'duration': duration,\n        'true_label': true_label,\n        'predicted_label_best_model': CLASS_NAMES[label_ens_best_m],\n        'predicted_label_ens_avg': CLASS_NAMES[label_ens_avg],\n        'predicted_label_ens_voting': CLASS_NAMES[label_ens_voting]\n        }\n    \n    new_row_df = pd.DataFrame([new_row])\n    df_result = pd.concat([df_result, new_row_df], ignore_index=True)\n\nprint(f'*Best Model:*\\n'\n      f'\\tNumber of True Predicted =  {num_true_predicted_best_m}\\n\\tNmber of False Predicted = {num_false_predicted_best_m}\\n'\n      f'*Ensembel Avg Model:*\\n'\n      f'\\tNumber of True Predicted =  {num_true_predicted_ens_avg}\\n\\tNmber of False Predicted = {num_false_predicted_ens_avg}\\n'\n      f'*Ensembel Voting Model:*\\n'\n      f'\\tNumber of True Predicted =  {num_true_predicted_ens_vot}\\n\\tNmber of False Predicted = {num_false_predicted_ens_vot}\\n')\n\n#-- Test Normals --\nprint('Processing Normal Samples: ==============================================')\ntrue_label = 'normal'\nnum_true_predicted_best_m = 0\nnum_false_predicted_best_m = 0\nnum_true_predicted_ens_avg = 0\nnum_false_predicted_ens_avg = 0\nnum_true_predicted_ens_vot = 0\nnum_false_predicted_ens_vot = 0\n\nfor video_file in sorted(os.listdir(normal_samples_dir_1)):    \n    #-- log --\n    print(f'Processing {video_file} -------------------------------------') \n    \n    video_path = os.path.join(normal_samples_dir_1, video_file)   \n    \n    fps ,total_frames, duration = get_video_properties(video_path)\n    print(f'FPS = {fps}\\nTotal Frames = {total_frames}\\nDuration = {duration}')\n    \n    label_ens_best_m = predict_video_best_model(video_path, best_model)\n    label_ens_avg = predict_video_ensemble_avg(video_path, models)\n    label_ens_voting = predict_video_ensemble_voting(video_path, models)\n    \n    print(f'True label: {true_label}\\n'\n          f'Predicted label best model: {CLASS_NAMES[label_ens_best_m]}\\n'\n          f'Predicted label ensemble avg: {CLASS_NAMES[label_ens_avg]}\\n'\n          f'Predicted label ensemble voting: {CLASS_NAMES[label_ens_voting]}\\n')\n    \n    if CLASS_NAMES[label_ens_best_m]==true_label:\n        num_true_predicted_best_m +=1\n    else:\n        num_false_predicted_best_m +=1\n    \n    if CLASS_NAMES[label_ens_avg]==true_label:\n        num_true_predicted_ens_avg +=1\n    else:\n        num_false_predicted_ens_avg +=1\n    \n    if CLASS_NAMES[label_ens_voting]==true_label:\n        num_true_predicted_ens_vot +=1\n    else:\n        num_false_predicted_ens_vot +=1\n    \n    \n    new_row = {\n        'video_name': video_file,\n        'fps': fps,\n        'total_Frams': total_frames,\n        'duration': duration,\n        'true_label': true_label,\n        'predicted_label_best_model': CLASS_NAMES[label_ens_best_m],\n        'predicted_label_ens_avg': CLASS_NAMES[label_ens_avg],\n        'predicted_label_ens_voting': CLASS_NAMES[label_ens_voting]\n        }\n    \n    new_row_df = pd.DataFrame([new_row])\n    df_result = pd.concat([df_result, new_row_df], ignore_index=True)\n\nprint(f'*Best Model:*\\n'\n      f'\\tNumber of True Predicted =  {num_true_predicted_best_m}\\n\\tNmber of False Predicted = {num_false_predicted_best_m}\\n'\n      f'*Ensembel Avg Model:*\\n'\n      f'\\tNumber of True Predicted =  {num_true_predicted_ens_avg}\\n\\tNmber of False Predicted = {num_false_predicted_ens_avg}\\n'\n      f'*Ensembel Voting Model:*\\n'\n      f'\\tNumber of True Predicted =  {num_true_predicted_ens_vot}\\n\\tNmber of False Predicted = {num_false_predicted_ens_vot}\\n')\n\n\ndf_result.to_csv('results.csv', index=False)    \n#-------------------------------------------------------------------------------------------------------------","metadata":{"execution":{"iopub.status.busy":"2024-10-23T07:37:22.626525Z","iopub.execute_input":"2024-10-23T07:37:22.626955Z","iopub.status.idle":"2024-10-23T07:41:10.541810Z","shell.execute_reply.started":"2024-10-23T07:37:22.626923Z","shell.execute_reply":"2024-10-23T07:41:10.539912Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#-- Run on Augmented videos -------------------------------------------------------------------------------------------\n#-- Test Fights --\nprint('Processing Fight Samples: ==============================================')\ntrue_label = 'fight'\n\nnum_true_predicted_best_m = 0\nnum_false_predicted_best_m = 0\nnum_true_predicted_ens_avg = 0\nnum_false_predicted_ens_avg = 0\nnum_true_predicted_ens_vot = 0\nnum_false_predicted_ens_vot = 0\n\n\nfor video_file in sorted(os.listdir(fight_samples_dir_2)):    \n    #-- log --\n    print(f'Processing {video_file} -------------------------------------') \n    \n    video_path = os.path.join(fight_samples_dir_2, video_file)      \n    \n    fps ,total_frames, duration = get_video_properties(video_path)\n    print(f'FPS = {fps}\\nTotal Frames = {total_frames}\\nDuration = {duration}')\n    \n    label_ens_best_m = predict_video_best_model(video_path, best_model)\n    label_ens_avg = predict_video_ensemble_avg(video_path, models)\n    label_ens_voting = predict_video_ensemble_voting(video_path, models)\n    \n    print(f'True label: {true_label}\\n'\n          f'Predicted label best model: {CLASS_NAMES[label_ens_best_m]}\\n'\n          f'Predicted label ensemble avg: {CLASS_NAMES[label_ens_avg]}\\n'\n          f'Predicted label ensemble voting: {CLASS_NAMES[label_ens_voting]}\\n')\n    \n    if CLASS_NAMES[label_ens_best_m]==true_label:\n        num_true_predicted_best_m +=1\n    else:\n        num_false_predicted_best_m +=1\n    \n    if CLASS_NAMES[label_ens_avg]==true_label:\n        num_true_predicted_ens_avg +=1\n    else:\n        num_false_predicted_ens_avg +=1\n    \n    if CLASS_NAMES[label_ens_voting]==true_label:\n        num_true_predicted_ens_vot +=1\n    else:\n        num_false_predicted_ens_vot +=1\n    \n    \n    new_row = {\n        'video_name': video_file,\n        'fps': fps,\n        'total_Frams': total_frames,\n        'duration': duration,\n        'true_label': true_label,\n        'predicted_label_best_model': CLASS_NAMES[label_ens_best_m],\n        'predicted_label_ens_avg': CLASS_NAMES[label_ens_avg],\n        'predicted_label_ens_voting': CLASS_NAMES[label_ens_voting]\n        }\n    \n    new_row_df = pd.DataFrame([new_row])\n    df_result = pd.concat([df_result, new_row_df], ignore_index=True)\n\nprint(f'*Best Model:*\\n'\n      f'\\tNumber of True Predicted =  {num_true_predicted_best_m}\\n\\tNmber of False Predicted = {num_false_predicted_best_m}\\n'\n      f'*Ensembel Avg Model:*\\n'\n      f'\\tNumber of True Predicted =  {num_true_predicted_ens_avg}\\n\\tNmber of False Predicted = {num_false_predicted_ens_avg}\\n'\n      f'*Ensembel Voting Model:*\\n'\n      f'\\tNumber of True Predicted =  {num_true_predicted_ens_vot}\\n\\tNmber of False Predicted = {num_false_predicted_ens_vot}\\n')\n\n#-- Test Normals --\nprint('Processing Normal Samples: ==============================================')\ntrue_label = 'normal'\n\nnum_true_predicted_best_m = 0\nnum_false_predicted_best_m = 0\nnum_true_predicted_ens_avg = 0\nnum_false_predicted_ens_avg = 0\nnum_true_predicted_ens_vot = 0\nnum_false_predicted_ens_vot = 0\n\nfor video_file in sorted(os.listdir(normal_samples_dir_2)):    \n    #-- log --\n    print(f'Processing {video_file} -------------------------------------') \n    \n    video_path = os.path.join(normal_samples_dir_2, video_file)  \n    \n    fps ,total_frames, duration = get_video_properties(video_path)\n    print(f'FPS = {fps}\\nTotal Frames = {total_frames}\\nDuration = {duration}')\n    \n    label_ens_best_m = predict_video_best_model(video_path, best_model)\n    label_ens_avg = predict_video_ensemble_avg(video_path, models)\n    label_ens_voting = predict_video_ensemble_voting(video_path, models)\n    \n    print(f'True label: {true_label}\\n'\n          f'Predicted label best model: {CLASS_NAMES[label_ens_best_m]}\\n'\n          f'Predicted label ensemble avg: {CLASS_NAMES[label_ens_avg]}\\n'\n          f'Predicted label ensemble voting: {CLASS_NAMES[label_ens_voting]}\\n')\n    \n    if CLASS_NAMES[label_ens_best_m]==true_label:\n        num_true_predicted_best_m +=1\n    else:\n        num_false_predicted_best_m +=1\n    \n    if CLASS_NAMES[label_ens_avg]==true_label:\n        num_true_predicted_ens_avg +=1\n    else:\n        num_false_predicted_ens_avg +=1\n    \n    if CLASS_NAMES[label_ens_voting]==true_label:\n        num_true_predicted_ens_vot +=1\n    else:\n        num_false_predicted_ens_vot +=1\n    \n    \n    new_row = {\n        'video_name': video_file,\n        'fps': fps,\n        'total_Frams': total_frames,\n        'duration': duration,\n        'true_label': true_label,\n        'predicted_label_best_model': CLASS_NAMES[label_ens_best_m],\n        'predicted_label_ens_avg': CLASS_NAMES[label_ens_avg],\n        'predicted_label_ens_voting': CLASS_NAMES[label_ens_voting]\n        }\n    \n    new_row_df = pd.DataFrame([new_row])\n    df_result = pd.concat([df_result, new_row_df], ignore_index=True)\n\nprint(f'*Best Model:*\\n'\n      f'\\tNumber of True Predicted =  {num_true_predicted_best_m}\\n\\tNmber of False Predicted = {num_false_predicted_best_m}\\n'\n      f'*Ensembel Avg Model:*\\n'\n      f'\\tNumber of True Predicted =  {num_true_predicted_ens_avg}\\n\\tNmber of False Predicted = {num_false_predicted_ens_avg}\\n'\n      f'*Ensembel Voting Model:*\\n'\n      f'\\tNumber of True Predicted =  {num_true_predicted_ens_vot}\\n\\tNmber of False Predicted = {num_false_predicted_ens_vot}\\n')\n\n\ndf_result.to_csv('results.csv', index=False)    \n#-------------------------------------------------------------------------------------------------------------","metadata":{"execution":{"iopub.status.busy":"2024-10-23T08:28:29.301782Z","iopub.execute_input":"2024-10-23T08:28:29.302211Z","iopub.status.idle":"2024-10-23T08:29:27.948021Z","shell.execute_reply.started":"2024-10-23T08:28:29.302175Z","shell.execute_reply":"2024-10-23T08:29:27.946174Z"},"trusted":true},"execution_count":null,"outputs":[]}]}